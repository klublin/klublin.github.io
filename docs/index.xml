<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Kevin Wei</title>
    <link>https://klublin.github.io/</link>
    <description>Recent content in Home on Kevin Wei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Feb 2018 18:56:13 -0500</lastBuildDate>
    
	<atom:link href="https://klublin.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Docs Clone</title>
      <link>https://klublin.github.io/projects/creations/docs/</link>
      <pubDate>Sun, 11 Feb 2018 12:41:05 -0500</pubDate>
      
      <guid>https://klublin.github.io/projects/creations/docs/</guid>
      <description>Google docs offers real time collaborative editing. This program offers the same thing with a different synchronization method. Google Docs uses Operational Transform(OT) to synchronize users. This project uses a CRDT implementation called YJS to sync users. The app is deployed on the Cloud and offers authentication of users, an Edit UI and document search. User authentication is done using Redis and MongoDB, front-end was created using React and backend is an Express App with a reverse proxy of Nginx.</description>
    </item>
    
    <item>
      <title>Forcing Visits to use SSL</title>
      <link>https://klublin.github.io/blog/force-ssl/</link>
      <pubDate>Thu, 01 Jan 2009 14:09:10 +0000</pubDate>
      
      <guid>https://klublin.github.io/blog/force-ssl/</guid>
      <description>Intro Doesn&amp;rsquo;t matter whether it&amp;rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.
 First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty &amp;lsquo;man in the middle&amp;rdquo; attack.</description>
    </item>
    
    <item>
      <title>Playlister App</title>
      <link>https://klublin.github.io/projects/creations/playlister/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://klublin.github.io/projects/creations/playlister/</guid>
      <description>Similar to Spotify, this app allows the user to create playlists, delete them and create accounts. The app includes authentication of users using JWT tokens, persistent storage of playlists and youtube links to songs.</description>
    </item>
    
    <item>
      <title>Search Results</title>
      <link>https://klublin.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://klublin.github.io/search/</guid>
      <description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml
[outputs] home = [&amp;#34;HTML&amp;#34;, &amp;#34;JSON&amp;#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.</description>
    </item>
    
    <item>
      <title>Telephone Exchange</title>
      <link>https://klublin.github.io/projects/creations/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://klublin.github.io/projects/creations/thread/</guid>
      <description>Multithreaded program to allow communication between telephone units. Using the command utility Telnet, terminals were allowed to send messages to each other in order to faciliate communication. There was one central unit which created telephone units, where each unit was its own thread. Each unit handled creating its own sockets and accepting and binding on ports. Able to handle more than 30 connections at once.</description>
    </item>
    
  </channel>
</rss>